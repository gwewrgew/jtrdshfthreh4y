# settings.py
INSTALLED_APPS = [
    ...
    'blog',
    'django.contrib.sites',
    'django.contrib.comments',
    ...
]

# urls.py
from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path('admin/', admin.site.urls),
    path('accounts/', include('django.contrib.auth.urls')),
    path('comments/', include('django.contrib.comments.urls')),
    path('', include('blog.urls')),
]

# models.py
from django.db import models
from django.contrib.auth.models import User

class Category(models.Model):
    name = models.CharField(max_length=100)

    def __str__(self):
        return self.name

class Article(models.Model):
    title = models.CharField(max_length=200)
    content = models.TextField()
    author = models.ForeignKey(User, on_delete=models.CASCADE)
    categories = models.ManyToManyField(Category)
    pub_date = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return self.title

# forms.py
from django import forms
from .models import Article

class ArticleForm(forms.ModelForm):
    class Meta:
        model = Article
        fields = ['title', 'content', 'categories']

# views.py
from django.shortcuts import render, redirect
from django.contrib.auth.decorators import login_required
from .models import Article
from .forms import ArticleForm

def home(request):
    articles = Article.objects.all()
    return render(request, 'blog/home.html', {'articles': articles})

@login_required
def create_article(request):
    if request.method == 'POST':
        form = ArticleForm(request.POST)
        if form.is_valid():
            article = form.save(commit=False)
            article.author = request.user
            article.save()
            return redirect('home')
    else:
        form = ArticleForm()
    return render(request, 'blog/create_article.html', {'form': form})

@login_required
def edit_article(request, article_id):
    article = Article.objects.get(pk=article_id)
    if request.method == 'POST':
        form = ArticleForm(request.POST, instance=article)
        if form.is_valid():
            form.save()
            return redirect('home')
    else:
        form = ArticleForm(instance=article)
    return render(request, 'blog/edit_article.html', {'form': form, 'article': article})

@login_required
def delete_article(request, article_id):
    article = Article.objects.get(pk=article_id)
    if request.method == 'POST':
        article.delete()
        return redirect('home')
    return render(request, 'blog/delete_article.html', {'article': article})

# templates/home.html
{% extends 'blog/base.html' %}

{% block content %}
  <h1>Blog</h1>
  <ul>
    {% for article in articles %}
      <li>
        <h2>{{ article.title }}</h2>
        <p>{{ article.content }}</p>
        <p>Author: {{ article.author }}</p>
        <p>Categories: {{ article.categories.all|join:", " }}</p>
        <p>Date: {{ article.pub_date }}</p>
        <a href="{% url 'edit_article' article.id %}">Edit</a>
        <a href="{% url 'delete_article' article.id %}">Delete</a>
      </li>
    {% endfor %}
  </ul>
{% endblock %}

# templates/create_article.html
{% extends 'blog/base.html' %}

{% block content %}
  <h1>Create Article</h1>
  <form method="POST">
    {% csrf_token %}
    {{ form.as_p }}
    <button type="submit
